// THIS FILE IS AUTOGENERATED! DO NOT CHANGE IT MANUALLY.
// It is built based on the examples in the documentation folder
// when the documentation site gets build by running "make site-build".
var expect = require('../');
describe('assertions/any/not-to-be-undefined.md', function () {
    it('#1', function () {
        expect(function () {
            expect('Hello world!', 'not to be undefined');
            expect({ foo: { bar: 'baz' } }, 'not to be undefined');
        }, 'not to throw');
    });
    it('#2', function () {
        expect(function () {
            expect(undefined, 'not to be undefined');
        }, 'to throw', [
            'expected undefined not to be undefined'
        ].join('\n'));
    });
});
describe('assertions/any/to-be-defined.md', function () {
    it('#1', function () {
        expect(function () {
            expect('Hello world!', 'to be defined');
            expect({ foo: { bar: 'baz' } }, 'to be defined');
        }, 'not to throw');
    });
    it('#2', function () {
        expect(function () {
            expect(undefined, 'to be defined');
        }, 'to throw', [
            'expected undefined to be defined'
        ].join('\n'));
    });
});
describe('assertions/any/to-be-falsy.md', function () {
    it('#1', function () {
        expect(function () {
            expect(0, 'to be falsy');
            expect(false, 'to be falsy');
            expect('', 'to be falsy');
            expect(undefined, 'to be falsy');
            expect(null, 'to be falsy');
        }, 'not to throw');
    });
    it('#2', function () {
        expect(function () {
            expect({}, 'to be falsy');
        }, 'to throw', [
            'expected {} to be falsy'
        ].join('\n'));
    });
});
describe('assertions/any/to-be-ok.md', function () {
    it('#1', function () {
        expect(function () {
            expect(1, 'to be ok');
            expect(true, 'to be ok');
            expect({}, 'to be ok');
            expect('foo', 'to be ok');
            expect(/foo/, 'to be ok');
        }, 'not to throw');
    });
    it('#2', function () {
        expect(function () {
            expect('', 'to be ok');
        }, 'to throw', [
            'expected \'\' to be ok'
        ].join('\n'));
    });
});
describe('assertions/any/to-be-truthy.md', function () {
    it('#1', function () {
        expect(function () {
            expect(1, 'to be truthy');
            expect(true, 'to be truthy');
            expect({}, 'to be truthy');
            expect('foo', 'to be truthy');
            expect(/foo/, 'to be truthy');
        }, 'not to throw');
    });
    it('#2', function () {
        expect(function () {
            expect('', 'to be truthy');
        }, 'to throw', [
            'expected \'\' to be truthy'
        ].join('\n'));
    });
});
describe('assertions/any/to-be-undefined.md', function () {
    it('#1', function () {
        expect(function () {
            expect(undefined, 'to be undefined');
        }, 'not to throw');
    });
    it('#2', function () {
        expect(function () {
            expect('Hello world', 'to be undefined');
        }, 'to throw', [
            'expected \'Hello world\' to be undefined'
        ].join('\n'));
    });
});
describe('assertions/any/to-equal.md', function () {
    it('#1', function () {
        expect(function () {
            expect({ a: 'b' }, 'to equal', { a: 'b' });
            expect(1, 'not to equal', '1');
            expect({ one: 1 }, 'not to equal', { one: '1' });
            expect(null, 'not to equal', '1');
            var now = new Date();
            expect(now, 'to equal', now);
            expect(now, 'to equal', new Date(now.getTime()));
            expect({ now: now }, 'to equal', { now: now });
        }, 'not to throw');
    });
    it('#2', function () {
        expect(function () {
            expect({ a: { b: 'c'} }, 'to equal', { a: { b: 'd'} });
        }, 'to throw', [
            'expected { a: { b: \'c\' } } to equal { a: { b: \'d\' } }',
            '',
            '{',
            '  a: {',
            '    b: \'c\' // should be \'d\'',
            '           // -c',
            '           // +d',
            '  }',
            '}'
        ].join('\n'));
    });
});
describe('assertions/string/not-to-have-length.md', function () {
    it('#1', function () {
        expect(function () {
            expect('Hello world', 'not to have length', 12);
        }, 'not to throw');
    });
    it('#2', function () {
        expect(function () {
            expect('Hello world', 'not to have length', 11);
        }, 'to throw', [
            'expected \'Hello world\' not to have length 11'
        ].join('\n'));
    });
});
describe('assertions/string/to-have-length.md', function () {
    it('#1', function () {
        expect(function () {
            expect('Hello world', 'to have length', 11);
        }, 'not to throw');
    });
    it('#2', function () {
        expect(function () {
            expect('Hello world', 'to have length', 12);
        }, 'to throw', [
            'expected \'Hello world\' to have length 12'
        ].join('\n'));
    });
});
